= strut

* http://github.com/kuruma-gs/strut

== DESCRIPTION:

  class UsersController < ApplicationController
    strut_controller User, index: [:index2, :index3], show: [:show2]
  end

* before_filter: find_index(find_index2, ... all index methods), find_one, new_one
* respond:       respond_index, respond_show, respond_create, respond_update, respond_destroy

  class UsersController < ApplicationController
    ### before_filter

    before_filter :find_index , only: [:index]
    before_filter :find_index2, only: [:index2]
    before_filter :find_index3, only: [:index3]
    before_filter :find_one,    only: [:show,:edit,:update]
    before_filter :new_one,     only: [:new,:create]

    # create index type filter
    def find_index
      @users = User.desc(:created_at).page(params[:page])
    end

    def find_index2
      @users = User.desc(:created_at).page(params[:page])
    end

    def find_index3
      @users = User.desc(:created_at).page(params[:page])
    end

    # show, edit, update type filter 
    def find_one
      @use = User.find(params[:id])
    end

    # new, create type filter
    def new_one
      @user = User.new
    end

    ## action

    def index
      respond_index(@users)
    end

    def index2
      respond_index(@users)
    end

    def index3
      respond_index(@users)
    end

    def show
      respond_show(@user)
    end

    def show2
      respond_show(@user)
    end

    def new
      respond_show(@user)
    end

    def edit
      respond_show(@user)
    end

    def create
      respond_create(@user)
    end

    def update
      respond_update(@user)
    end

    def destroy
      respond_destroy(@user)
    end

    ## respond

    private
    def respond_index(@users,options={})
      options[:t] ||= Proc.new{}
      respond_to do |format|
        format.html &options[:t]
        format.xml  { render :xml  => objs }
        format.json { render :json => objs }
        format.js
      end
    end

    def respond_show(obj=nil,options={})
      options[:t] ||= Proc.new{}
      respond_to do |format|
        format.html &options[:t]
        format.xml  { render :xml  => obj }
        format.json { render :json => obj }
        format.js
      end
    end

    def respond_create(obj=nil,options={})
      options[:t] ||= Proc.new{redirect_to action: show}
      options[:f] ||= Proc.new{render action: new}
      respond_to do |format|
        if obj.save
          flash[:notice] = options[:t_message]
          format.html &options[:t]
          format.xml  { render :xml  => obj, :status => :created, :location => obj }
          format.json { render :json => obj, :status => :created, :location => obj }
          format.js
        else
          flash[:error] = options[:f_message] if options[:f_message]
          format.html &options[:f]
          format.xml  { render :xml  => obj.errors, :status => :unprocessable_entity }
          format.json { render :json => obj.errors, :status => :unprocessable_entity }
          format.js
        end
      end
    end

    def respond_update(obj=nil,options={})
      options[:t] ||= Proc.new{redirect_to action: show}
      options[:f] ||= Proc.new{render action: edit}
      respond_to do |format|
        if obj.update_attributes(params[obj.class.to_s.underscore.to_sym])
          flash[:notice] = options[:t_message]
          format.html &options[:t]
          format.xml  { head :ok }
          format.json { head :ok }
          format.js
        else
          flash[:error] = options[:f_message] if options[:f_message]
          format.html &options[:f]
          format.xml  { render :xml  => instance_variable_get("@#{file_name}").errors, :status => :unprocessable_entity }
          format.json { render :json => instance_variable_get("@#{file_name}").errors, :status => :unprocessable_entity }
          format.js
        end
      end
    end

    def respond_destroy(obj=nil,options={})
      options[:t] ||= Proc.new{redirect_to action: index}
      options[:f] ||= Proc.new{render action: edit}
      respond_to do |format|
        if obj.destroy
          flash[:notice] = options[:t_message]
          format.html &options[:t]
          format.xml  { head :ok }
          format.json { head :ok }
          format.js
        else
          flash[:error] = options[:f_message]
          format.html &options[:f]
          format.xml  { head :unprocessable_entity }
          format.json { head :unprocessable_entity }
          format.js
        end
      end
    end
  end

== FEATURES/PROBLEMS:

* FIX (list of features or problems)

== SYNOPSIS:

  FIX (code sample of usage)

== REQUIREMENTS:

* FIX (list of requirements)

== INSTALL:

* FIX (sudo gem install, anything else)

== LICENSE:

(The MIT License)

Copyright (c) 2011 kuruma3

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
